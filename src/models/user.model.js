import mongoose, {Schema} from "mongoose";
import jwt from "jsonwebtoken";
import bcrypt from 'bcrypt'

const userSchema = new Schema({
    // iD is generated by MongoDB
    username: {
        type: String, 
        required: true,
        unique: true, 
        lowercase: true,
        trim: true, // trim means whitespace, tab and other are removed.
        index: true // Index helps to optimize the searching process.
    },
    email: {
        type: String,
        required: [ true, 'Email is required'],
        unique: true,
        lowercase: true,
        trim: true, 
    },
    fullName: {
        type: String,
        required: [ true, 'Fullname is required'],
        trim: true, 
        index: true,
    },
    avatar: {
        type: String, //cloudinary URL
        required: true,
    },
    coverImage: {
        type: String, // cloudinary URL
    },
    watchHistory: {
        type: Schema.Types.ObjectId,
        ref: "Video"
    },
    password: {
        type: String,
        required: [ true, 'Password is required']
    },
    refreshToken: {
        type: String,
    }
}, { timestamps: true})


/// Below is a HOOK..

// This helps to encrypt the password before submiting the detail
userSchema.pre("save", async function (next) {
    // IF statement encrypted the password only if password is changed or modified else not change.
    if (!this.isModified("password")) return next();

    this.password = await bcrypt.hash(this.password, 10)
    next()
})

userSchema.methods.isPasswordCorrect = async function (password) {
  return await bcrypt.compare(password, this.password)
  // return boolean True or False.
}

userSchema.methods.generateAccessToken = function() {
     return jwt.sign(
        {
            _id: this._id,
            email: this.email,
            username: this.username,
            fullName: this.fullName
        },
        process.env.ACCESS_TOKEN_SECRET,
        // Expire is in Object.
        {
            expiresIn: process.env.ACCESS_TOKEN_EXPIRY,
        }
    )
}

userSchema.methods.generateRefreshToken = function () {
        return jwt.sign(
        {
            _id: this._id,
        },
        process.env.REFRESH_TOKEN_SECRET,
        // Expire is in Object.
        {
            expiresIn: process.env.REFRESH_TOKEN_EXPIRY,
        }
    )
}


export const User = mongoose.model("User", userSchema)